import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, CommandStart, Text
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputMediaPhoto



# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.ini
import configparser
config = configparser.ConfigParser()
config.read("config.ini")

# __________________________–î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞__________________________
token = config.get("Bot", "token")
admin_id = int(config.get("Bot", "admin_id"))
chat_link = config.get("Bot", "chat_link")

bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())

# __________________________–í–æ–ø—Ä–æ—Å—ã__________________________
question_1 = " –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —Ä–∞—Å–∫–∞–∂–∏ –æ—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ?"
question_2 = " –û—Ç–ª–∏—á–Ω–æ, –∞ –±—ã–ª –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ —Å–∫–∞–º–µ? "
question_3 = " –ê —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ?"
# __________________________–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —É –∞–¥–º–∏–Ω–∞__________________________
admin_question_1 = "–æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏"
admin_question_2 = "–æ–ø—ã—Ç"
admin_question_3 = "–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏"
# _________________________________________________________


# __________________________–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞__________________________
async def on_startup(_):
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
# _________________________________________________________


# __________________________–î–µ–π—Å—Ç–≤–∏–µ —Å –ë–î__________________________
from datetime import datetime, timedelta

class Database:
    def __init__(self, db_file):
        self.connection = sqlite3.connect(db_file)
        self.cursor = self.connection.cursor()
        self.message_tracking = {}
        print("–í–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

    def add_user(self, ID, username):
        with self.connection:
            try:
                self.cursor.execute("INSERT INTO 'user' VALUES (?, ?, ?, ?, ?)", (ID, "null", "null", "null", username))
            except:
                pass

    def add_client(self, ID):
        with self.connection:
            try:
                self.cursor.execute("INSERT INTO 'client' VALUES (?)", (ID,))
            except:
                pass

    def update_user_data(self, ID, a1, a2, a3):
        with self.connection:
            self.cursor.execute("UPDATE 'user' SET answer1 = ?, answer2 = ?, answer3 = ? WHERE user_id = ?", (a1, a2, a3, ID))

    def get_user_data(self, ID):
        with self.connection:
            return self.cursor.execute("SELECT * FROM 'user' WHERE user_id = ?", (ID,)).fetchmany()[0]

    def delete_zayavka(self, ID):
        with self.connection:
            return self.cursor.execute("DELETE FROM 'user' WHERE user_id = ?", (ID,))

    def client_exists(self, ID):
        with self.connection:
            result = self.cursor.execute("SELECT * FROM 'user' WHERE user_id = ?", (ID,)).fetchmany(1)
            if not bool(len(result)):
                return False
            else:
                return True

    def update_last_message_time(self, user_id):
        now = datetime.utcnow()
        self.message_tracking[user_id] = now

    def get_last_message_time(self, user_id):
        return self.message_tracking.get(user_id, datetime.utcnow() - timedelta(seconds=10))

    def get_message_count(self, user_id):
        return self.message_tracking.get(user_id, 0)

    def increment_message_count(self, user_id):
        current_count = self.get_message_count(user_id)
        self.message_tracking[user_id] = current_count + timedelta(seconds=1)
    
    def confirmed_user(self, user_id):
        with self.connection:
            result = self.cursor.execute("SELECT * FROM 'client' WHERE user_id = ?", (user_id,)).fetchmany(1)
            if not bool(len(result)):
                return False
            else:
                return True
# ________________________________________________________

# __________________________–ö–Ω–æ–ø–∫–∏__________________________
cb = CallbackData("fabnum", "action")

main_menu = InlineKeyboardMarkup(row_width=1)
main_menu.add(InlineKeyboardButton(text='üî∞ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üî∞', callback_data=cb.new(action='start_answer')))

send_menu = InlineKeyboardMarkup(row_width=2)
send_menu.add(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=cb.new(action="send")),
              InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=cb.new(action='application')))


def admin_menu(ID):
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"#y{str(ID)}"),
             InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'#n{str(ID)}'))
    return menu

# _________________________________________________________
class SetLink(StatesGroup):
    waiting_for_link = State()

@dp.message_handler(Command("set_link"), user_id=admin_id)
async def set_link_command(message: types.Message):
    await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã!")
    await SetLink.waiting_for_link.set()

@dp.message_handler(state=SetLink.waiting_for_link, user_id=admin_id)
async def set_link(message: types.Message, state: FSMContext, user_id: int):  # –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞ –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    new_link = message.text
    global chat_link
    chat_link = new_link
    await bot.send_message(message.chat.id, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞!")
    await state.finish()

# __________________________–ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î__________________________
db = Database("data.db")
# _________________________________________________________


class get_answer(StatesGroup):
    answer1 = State()
    answer2 = State()
    answer3 = State()


# ____________________________________________________
# @dp.message_handlers(commands=["start"])
async def command_start(message: types.Message):  
    if message.from_user.username is not None:
        if db.confirmed_user(message.from_user.id):
            await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã ‚ùóÔ∏è")
        else:
            if db.client_exists(message.from_user.id):
                await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É ‚ùóÔ∏è")
            else:
                # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                image_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "image", "start.png")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await bot.send_photo(
                    message.from_user.id,
                    InputFile(image_path),
                    caption=(
                        "üëã –ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n"
                        "üî∏ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∞ –±–ª–∞\n\n"
                        "‚ö°Ô∏è –ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
                        "–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
                    ),
                    parse_mode=types.ParseMode.MARKDOWN,
                    reply_markup=main_menu
                )
    else:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <b>username</b>(–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start", parse_mode=types.ParseMode.HTML)
                

# @dp.callback_query_handlers(cb.filter(action=["send", "application"]), state="*")
async def send_state(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    action = callback_data["action"]
    current_state = await state.get_state()
    if current_state is None:
        return
    if action == "send":
        await bot.send_message(admin_id, f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{str(db.get_user_data(call.from_user.id)[4])}\n"
                                         f"{admin_question_1}: <b>{str(db.get_user_data(call.from_user.id)[1])}</b>\n"
                                         f"{admin_question_2}: <b>{str(db.get_user_data(call.from_user.id)[2])}</b>\n"
                                         f"{admin_question_3}: <b>{str(db.get_user_data(call.from_user.id)[3])}</b>", parse_mode=types.ParseMode.HTML, reply_markup=admin_menu(call.from_user.id))
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="""–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùóÔ∏è """)

        await state.finish()
    if action == "application":
        db.delete_zayavka(call.from_user.id)
        await state.finish()
        await command_start(call)
    await call.answer()


# @dp.callback_query_handler(text_contains="#")
async def access(call: types.CallbackQuery):
    temp = [call.data[1:2], call.data[2:]]
    username = f"@{str(db.get_user_data(temp[1])[4])}"  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if temp[0] == "y":
        db.add_client(temp[1])
        db.delete_zayavka(temp[1])
        await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id, text="–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É ‚ùóÔ∏è ")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "image", "confirm.png")
        image = InputFile(image_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_photo(
            temp[1],
            image,
            caption=(
                f'üí† –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, {username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç! üí†\n'
                '\n'
                f'üîÜ –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_link}\n'
                '\n'
                '‚ùó <b>–í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ù–ê–•–û–î–ò–¢–°–Ø –í –ó–ê–ö–†–ï–ü–ï ‚ùó</b>'
            ),
            parse_mode=types.ParseMode.HTML
        )
    elif temp[0] == "n":
        await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id, text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É ‚ùóÔ∏è")
        await bot.send_message(temp[1], f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {username}, –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ ‚ö†Ô∏è ')

    await call.answer()

# @dp.callback_query_handlers(cb.filter(action=["start_answer"]))
async def start_state(call: types.CallbackQuery, callback_data: dict):  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    action = callback_data["action"]
    if action == "start_answer":
        db.add_user(call.from_user.id, call.from_user.username)
        await bot.send_message(call.from_user.id, f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n1) <b>{question_1}</b>", parse_mode=types.ParseMode.HTML)
        await get_answer.answer1.set()


# @dp.message_handlers(state=get_answer.answer1)
async def answer1(message: types.Message, state: FSMContext):  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    async with state.proxy() as data:
        data["answer1"] = message.text
    await bot.send_message(message.from_user.id, f'2) <b>{question_2}</b>', parse_mode=types.ParseMode.HTML)
    await get_answer.next()


# @dp.message_handlers(state=get_answer.answer2)
async def answer2(message: types.Message, state: FSMContext):  # –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
    async with state.proxy() as data:
        data["answer2"] = message.text
    await bot.send_message(message.from_user.id, f'3) <b>{question_3}</b>', parse_mode=types.ParseMode.HTML)
    await get_answer.next()


# @dp.message_handlers(state=get_answer.answer3)
async def answer3(message: types.Message, state: FSMContext):  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    async with state.proxy() as data:
        data["answer3"] = message.text
    await bot.send_message(message.from_user.id, f'–û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n'
                                                 f'1) <b>{data["answer1"]}</b>\n'
                                                 f'2) <b>{data["answer2"]}</b>\n'
                                                 f'3) <b>{data["answer3"]}</b>', parse_mode=types.ParseMode.HTML, reply_markup=send_menu)
    db.update_user_data(message.from_user.id, data["answer1"], data["answer2"], data["answer3"])
# _________________________________________________________


# –∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –ë–î" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
@dp.message_handler(state="*", commands=["clear_db"], user_id=admin_id)
async def cmd_clear_db(message: types.Message, state: FSMContext):
    db.connection.execute("DELETE FROM 'user'")
    db.connection.execute("DELETE FROM 'client'")
    db.connection.commit()
    await bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
# __________________________–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π__________________________


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=["start"])
    dp.register_callback_query_handler(send_state, cb.filter(action=["send", "application"]), state="*")
    dp.register_callback_query_handler(access, text_contains="#")
    dp.register_callback_query_handler(start_state, cb.filter(action=["start_answer"]))
    dp.register_message_handler(answer1, state=get_answer.answer1)
    dp.register_message_handler(answer2, state=get_answer.answer2)
    dp.register_message_handler(answer3, state=get_answer.answer3)


# _________________________________________________________

register_handlers_client(dp)  # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
